#include <iostream>
#include <chrono>
#include <bits/stdc++.h> 
using namespace std;
using namespace std::chrono;

void printArray(int* arr, int len) {
 for (int i=0; i<len; i++) cout<<arr[i]<<" ";
 cout<<endl;
}

void merge(int arr[], int left, int middle, int right)
{
 int n1 = middle - left + 1;
 int n2 = right - middle;
 int L[n1], R[n2];
 for (int i = 0; i < n1; i++)
 L[i] = arr[left + i];
 for (int j = 0; j < n2; j++)
 R[j] = arr[middle + 1 + j];
 int i = 0;
 int j = 0;
 int k = left;
 while (i < n1 && j < n2) {
 if (L[i] <= R[j]) {
 arr[k] = L[i];
 i++;
 }
 else {
 arr[k] = R[j];
 j++;
 }
 k++;
 }
 while (i < n1) {
 arr[k] = L[i];
 i++;
 k++;
 }
 while (j < n2) {
 arr[k] = R[j];
 j++;
 k++;
 }
}

void mergeSort(int arr[],int left,int right){
 if(left>=right)
 {
     return;
 }
 int mid =left+ (right-left)/2;
 mergeSort(arr,left,mid);
 mergeSort(arr,mid+1,right);
 merge(arr,left,mid,right);
}

int main()
{
 int n,ch;
 auto start=high_resolution_clock::now();
 auto stop=high_resolution_clock::now();
 auto duration = duration_cast<microseconds>(stop-start);
 cout<<"\nHow many elements you want to sort?";
 cin>>n;
 int arr[n];
 for(int i=0;i<n;i++)
 {
     arr[i]=(rand()%n)+1;
 }
 int arr_size=sizeof(arr)/sizeof(arr[0]);
 cout<<"\nOriginal array:";
 printArray(arr,arr_size);
 start=high_resolution_clock::now();
 mergeSort(arr, 0, arr_size-1);
 stop=high_resolution_clock::now();
 duration=duration_cast<microseconds>(stop-start);
 cout<<"\nArray after sorting:";
 printArray(arr,arr_size);
 cout<<"\nTime taken by function:"<<duration.count()<<" microseconds\n";
 return 0;
}
